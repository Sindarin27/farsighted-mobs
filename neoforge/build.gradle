plugins {
    id 'com.github.johnrengelman.shadow'
    id "me.shedaniel.unified-publishing"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

def loomPlatform = project.property('loom.platform')
def projectName
if(loomPlatform == 'neoforge')
    projectName = 'NeoForge'
else if(loomPlatform == 'fabric')
    projectName = 'Fabric'
else if (loomPlatform == 'forge') {
    projectName = 'Forge'
}

unifiedPublishing {
    project {
        displayName = "[${projectName}] ${rootProject.minecraft_version} - ${rootProject.mod_version}"
        version="${rootProject.mod_version}"
        releaseType = "${rootProject.mod_release_type}".toLowerCase()
        //changelog = new File("${rootProject.projectDir}/changelog.html").text
        gameVersions = [rootProject.minecraft_version]
        mainPublication remapJar
        gameLoaders = ["${loomPlatform}"]

        if (loomPlatform == 'fabric') {
            relations {
                depends {
                    curseforge="fabric-api"
                    modrinth="fabric-api"
                }
                depends {
                    curseforge="architectury-api"
                    modrinth="architectury-api"
                }
            }
        } else if (loomPlatform == 'forge') {
            relations {
                depends {
                    curseforge="architectury-api"
                    modrinth="architectury-api"
                }
            }
        }

        var CURSE_API_KEY = project.findProperty("curseforge_token") ?: System.getenv("curseforge_token") ?: ""
        if (CURSE_API_KEY != "") {
            curseforge {
                token = CURSE_API_KEY
                id = "${rootProject.curseforge_id}"
                gameVersions.addAll "Java ${rootProject.java_version}"
            }
        }

        var MODRINTH_TOKEN = project.findProperty("modrinth_token") ?: System.getenv("modrinth_token") ?: ""
        if (MODRINTH_TOKEN != "") {
            modrinth {
                token = MODRINTH_TOKEN
                id = "${rootProject.modrinth_id}"
            }
        }
    }
}

rootProject.tasks.getByName("modPublish").dependsOn tasks.getByName("publishUnified")